---
layout: post
title:  "Glitches"
date:   2015-11-15 15:15:26
published: false
categories: jekyll update
---
 Recently I've become fascinated by data corruption mechanisms and their visual representations.
 The so called universe of glitches is vast, complex and full of misconceptions.

 In this article I tried for myself to flatten out and simplify these notions so as to see clearer.

 First off here are a few definitions from wikipedia :

 > A glitch is a short-lived fault in a system. It is often used to describe a transient fault that corrects itself, and is therefore difficult to troubleshoot. The term is particularly common in the computing and electronics industries, in circuit bending, as well as among players of video games, although it is applied to all types of systems, including human organizations and nature. [Source][https://en.wikipedia.org/wiki/Glitch]

 > Databending (or data bending) is the process of manipulating a media file of a certain format, using software designed to edit files of another format. Distortions in the medium typically occur as a result, and the process either falls under a broader category of, or is frequently employed in glitch art. [Source][https://en.wikipedia.org/wiki/Databending]

## What is glitch art ?
Is it an aesthetic or a process ?

Restricting glitch art to an aesthetic is way more convenient for categorization purposes, here is a Reddit
[thread](https://www.reddit.com/r/glitch_art/comments/3cgwik/discussion_is_deep_dream_glitch_art/) discussing that issue.
Considering glitch art as a process is way more interesting and rich.

Here is how I would express my definition of glitch art. For the sake of simplicity I limit myself to visual glitch art.
Unexpected visual results
Error inducing processes resulting in altered visuals.

The notion of error is a the core of this definition. For a glitch to exist there has to be a fuck-up somewhere even though that fuck-up can be on purpose.


So following those two definitions the notion of glitch encapsulates the notion of databending and adds the time dimension to it. The essence of all of it is data corruption. Now the scope of data corruption is extremely wide and most of it is boring so I will narrow it down to visual uses of data corruption. Since data corruption is clunky and awkward to say I tend to prefer the use of the word `glitch` which sounds squishier and slick.


As we've seen recently with the boom of Neural Network technology ,and most notably with the publication of the results from Deep Learning teams at Google, a new kind of fucked up image filter made its way into the hands of the public.

Can style transfer or deep dream be considered glitching ? In my definition yes

Just the same way as there used to be artifacts in analog media, altering the data of new digital material is just as exciting and cool.

# 2D data corruption techniques

An image is just a glorified 2-dimensional array of dots. Now by fucking up with those dots you get interesting results.

## Channel shifting

[A great tutorial to use that effect with Processing](http://datamoshing.com/2016/06/29/how-to-glitch-images-using-rgb-channel-shifting/)

## .jpeg data corruption

## .png data corruption

[Png glitch](https://github.com/ucnv/pnglitch)

## Pixel sorting
[Pixel sorter in Ruby](https://github.com/czycha/pxlsrt)

# 3D data corruption techniques

When investigating various ways to glitch things I discovered in awe that the field of 3D glitching is vastly under-explored.

3D models are in essence just a list of geometrical coordinates that can be altered and manipulated just in the same way the pixels of an image can be transformed.

## .obj file alteration

[Inspiration](http://www.srcxor.org/blog/3d-glitching/)
It is the oldest and the most standard way of packaging 3d models. You can read the full [file format specification](https://en.wikipedia.org/wiki/Wavefront_.obj_file) to better understand how it works.

I made a [simple tool](https://github.com/pskl/3dglitch) to automate the process.
